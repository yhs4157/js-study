스타일링 웹 form

왜 스타일링 form 위젯은 시도되는가? 

 - form 컨트롤은 1995년 HTML2 문서에서 추가되었다. css는 1996년 말까지 공식화되지 않았다. 
 그래서 브라우저는 그 후 몇년동안 css를 지원하지 않았다. 브라우저들은 form 컨트롤에 대한 랜더링과
 관리를 os을 아래에 두고 의존했다. 

 - 그리고 스타일 HTML에 css 이용가능해졌을 때, 브라우저 공급자들은 역사적으로 form 컨트롤 스타일
 가능함을 주저했었다. 사용자들이 그들의 플랫폼의 시각적 부분에 적응하였기 때문이다. 하지만 이것은 변화하였다. 
 웹사이트 오너들은 form 스타일이 그들의 사이트 디자인이 보다 더 잘 맞기를 원했다. 그래서 웹 플랫폼은 
 변화하였다. 그것이 보다 가능하도록. 

 - form 위젯에 대하여, 그들 스타일을 변화시키는 리빌드는 어렵다고 한다. 하지만 우리는 css를 사용할 수 있다. 
 많은 form 기능에 대해서, 하지만 우리는 우리가 유용성을 깨지 않았다는 확신을 가질 필요가 있다. 

css가 포함될 때 모든 위젯이 동일하게 생성되는 것이 아니다. 

 - 현재에, 몇몇 어려움은 form에 css를 사용할 때 생긴다. 그 문제는 세 부분의 카테고리로 나누어 볼 수 있다. 

 The good
  - 몇몇 속성은 플랫폼을 가로지름에 스타일할 수 있다. 이것은 앞에 요소들이다. 
  1. form
  2. fieldset, legend
  3. single-text <input>
  4. multi-line <textarea>
  5. button
  6. label
  7. output

 The bad
  - 몇몇 요소는 스타일하기 어렵다. 복잡한 css 때문이거나 특별한 트릭을 필요로 해서
  1. checkbox, radio button
  2. search <input>
  - 우리는 이 특수한 기능을 다를 방법을 Advaned form styling에서 다루겠다. 
  
 The ugly
  - 몇몇 요소는 css를 사용하여 스타일링할 수 없다. 
  1. color <input>
  2. datetime-local <input>
  3. range <input>
  4. file <input>
  5. select, option, optgroup, datalist
  6. progress, meter

 - 우리는 이 요소들을 Advanced form styling에서 설명할 것이다. 

 - 이 컨트롤에 대한 실제 문제는 복잡한 구조를 지닌다. 그리고 몇몇 시초적인 스타일 아래에. 
 너는 일반적으로 컨트롤의 안쪽 컨포넌트를 스타일링할 필요가 없다. 이 위젯을 만들 때

 - 너가 위젯 커스텀마이징을 원하면, 너는 실제로 너 자신이 HTLM, CSS, JavaScript를 사용해야한다. 
 이것은 form 부분에 핵심이다. 이것은 핵식 form 문서에서 벗어나지만, 우리 이 고급문서, form 컨트롤을 
 커스텀 빌드하는 방법을 봅시다. 

The good 

 - form 컨트롤을 스타일링하기 위하여 css로 스타일링하는 것은 쉽다. 너는 어느 어려움에 직면할 필요가 없다. 
 그들은 대부분 다른 HTML 요소처럼 작동하기 때문에. 우리는 몇몇 단순한 form 스타일링만 보면된다. 

 - 기초적인 css 툴과 같이 위에서 덮을 것이다. 우리는 또한 몇몇 선택지를 제공한다. UI수도 클래스 - UI의 
 현재 상태에 의존한 스타일링이다. 우리는 다음 문서에서 자세히 알아볼 것이다. UI 수도-클래스

 - 우리는 예시를 사용할 것이다. 문서의 끝에서 너에게 몇몇 아이디어르 주려고 기본 form 컨트롤이나 배치에.
 하지만 우리가 이걸하기 전에, 우리는 form 스타일링의 특별한 측면에 대해 이야기해야한다. 

 Font and text
  
  - css 폰트와 텍스트 기능은 어떤 위젯에도 쉽게 사용할 수 있다. 하지만 브라우저 작동은
  종종 비합리적이다. 기본적으로, 몇몇 위젯은 font-family나 font-size 상속하지 않는다. 
  많은 브라우저들이 그 시스템을 대신해 준다. 너의 form의 형태가 너의 잔여 컨텐츠에 종속 시키기
  위하여 너는 너의 스타일시트에 법칙을 추가할 여야한다. 

  ex) button, input, select, textarea {
      font-family: inherit; 
      font-size: 100%; 
  }

  - 그 기본값은 방법의 수에 따라 다르다. 상속하는 것은 그들의 폰트가 부모의 폰트 그룹으로 변화하게 
  만든다. 예를 들면 부모 컨테이너의 기본 serif 폰트와 같이. 그들은 모두 작동한다, 강한 예외를 제외하고
  <input type="submit>은 크롭에서 부모로부터 상속받지 않는다. 호이려, 그것은 font-family: system-ui를
  사용한다. 이것은 <button> 요소가 사용하는 것과 다른 이유이다. 

  - 많은 토론이 있다. form은 시스템 기본값을 쓸 때 보기 좋느냐 혹은 너의 켄텐츠에 맞춤
  커스텀이 보기 좋느냐. 이 결정은 너으 ㅣ것이다. 너의 사이트 혹은 웹 어플리케이션의 디자이너로써

박스 사이즈
 
 - 모든 텍스트 필드는 css 박스 관련된 모든 값에 대한 지지와 관련된다. 너비, 높이, 안 두께, 밖 두께, 선과 같이. 
 하지만 이전 브라우저들은 시스템 기본값에 의존했기에, 이것은 너가 너가 원하는 너의 컨텐츠 안에 그들을 섞기에 
 의존하는 방법을 정의한다.너가 자연적으로 위젯이 보이길 원하면 너는 조금 어려운 문제에 직면한다. 너가 원하는 일관된 
 크기를 원한다면. 

 - 이것은 각각의 위젯이 그들만의 선 두께, 안 간격, 밖 간격을 지니고 있기 때문이다. 몇몇 다른 위젯같에 같은 간격을 윈한다면
 너는 box-sizing을 사용할 수 있다. 다른 속성에 같은 값을 지닐 수 있다. 

 ex) input, textarea, select, button {
     width: 150px; 
     padding: 0; 
     margin: 0; 
     box-sizing: border-box; 
 }

Legend placement

 - <legend> 요소는 스타일링할 수 있다. 하지만 야간의 트릭을 이용하여야한다. 기본적으로 그것은 
 <fieldset>의 경계 위에 위치해있다. 상단 좌측 코너에. 그것을 위치 잡기 위해서는, 몇몇 예시는 
 바탁 좌측에 있다. 너는 위치 잡는 것에 의존할 필요가 있다. 

 - 요구사항에 맞체 위치 잡기 위해서, 우리는 css를 사용해야한다. 
 fieldset {
    position: relative; 
 }
 legend {
    position: absolute; 
    bottom: 0; 
    right: 0; 
 }

 - <fieldset>은 위치를 조정할 필요가 있다. 그래서 <legend>는 위치를 그것에 상대적으로 잡는다. 

 - <legend> 요소는 매우 접근성과 관련하여 중요하다. 그것은 보조적인 기술이다. label과 같이 
 legend 컨텐츠는 비슷하게 불린다. 그것은 시각적인 위치를 변화한다. 

특별한 스타일링 예제

 1. 포스트카드 배경 넣기 
 2. 


