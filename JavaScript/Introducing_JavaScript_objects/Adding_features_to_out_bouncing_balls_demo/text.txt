힌트와 팁
 - 시작하기 전에 두 포인트
 : 이 평가서는 꽤 도전적이다. 코딩 전에 전체 평가서를 읽어라. 
 : 이것은 좋은 아이디어다. 데모에서 분배된 코드를 모으는데. 너가 각각 스테이지가 작동한 후에
 그래서 너는 너의 것에서 문제점을 찾고 난 이후에 돌아오는 것을 선호할 수 있다. 

프로젝트 개요
 - 우리 바운스 볼 데모는 재미있지만 지금 우리는 조금 더 상호작용적으로 만들어지길 나쁜 원을 유저 컨트롤되게 원한다. 
 그리고 그것은 그들이 잡은 공을 먹는 것이다. 우리는 또한 너의 오브젝트 빌딩 스킬이 올라가길 원한다. 일반적인 Shape() 
 오브젝트를 만듦으로써. 마지막으로 우리는 원한다. 추가적으로 점수를 카운트하길. 

완성하기 

새로운 오브젝트 생성하기
 1. Shape 생성자는 x, y, velX, velY 속성으로 정의된다. Ball 생성자와 같지만 color와 size가 없다. 
 2. 새로운 exists라는 속성을 추가한다. 그것은 프로그램에 공이 존재하는지 여부를 측정한다. 이것은 bool속성이다. 
 3. 그 Ball 생성자는 x, y, velX, velY, exists을 상속받는다. Shape 생성자로부터
 4. color와 size는 정의된다. Ball 생성자가 그랬던 것처럼. 
 5. Ball 생성자의 프로토타입과 생성자 구성되어 있음을 알아라. 
 6. Ball 프로토타입 collisionDetect() 메소드는 약간 업데이트가 필요하다. 그 코드는 
 그대로 유지되지만, EvilCircle은 바운스 볼을 먹기 시작할 것이다. exists 속성이 false가
 될 떄까지. 그리고 그것은 공의 수를 줄인다. 충돌 감지에 포함되는. 공은 충돌 감지로부터 고려될 필요가 있다. 
 exists가 true라면. 그래서 collisionDetect 코드는 수정된다. 

 - 공 draw()와 update()메소드 정의는 동일하게 유지된다. 
 - 너는 새로운 공 파라미터를 추가할 필요가 있다. exists 파라미터는 5번째 파라미터이고 
 true값이 주어진다. 
 
EvilCircle 정의하기
 - 이제 나쁜 놈을 만날 차례다. - EvilCircle(). 우리 게임은 오직 나쁜 공을 추가할 뿐이다. 
 하지만 우리는 그것 사용하려는 생성자를 정의해야한다. Shape()로부터. 우리에게 연습을 위한. 너는 다른
 
 - EvilCircle 생성자는 x, y, velX, velY, exists를 상속받아야한다. Shape()생성자로부터. 

 - 너는 Shape.call(this, x, y, 20, 20, exists) 해야한다. 
 - color는 white, size는 10
 - 다시 기억해라 너는 생성자에 파라미터로부터 상속된 속성이다. 그리고 prototype과 constructor 속성을
 구성해야한다. 

EvilCircle의 메소드 정의하기 
 - draw() : 이 방식은 Ball()'s draw()와 같은 목적의 메소드이다. 이것은 그 오브젝트 인스턴스를 캔버스 위에
 그린다. 그것은 비슷한 방식으로 작동할 것이다. 그래서 너는 Ball.prototype.draw를 카피할 수 있다. 너는 다음에 
 따라 변화시킬 수 있다. 
  - 우리는 악마 원이 충족되어 있지 않기를 원한다. 하지만 바깥선은 가지길. 너는 fillStyle과 fill 대신
  strokeStyle과 stroke로 대체해야한다. 
  - 우리는 또한 얇고 , 그래서 너는 악마 원이 쉬워보인다. 그것이 lineWidth에 대한 값을 설정함으로 달성할 수 있다. 
  beginPath()을 호출해서 

 - checkBounds() : 이 메소드는 같은 것을 한다. Ball's update() 함수와 - 악마 원이 스크린의 
 밖으로 가는지 여부를 확인할 수 있다. 그리고 멈출 수 있다. 또한, 너는 Ball.prototype.update를 복사할 수 있다. 
 하지만 너는 약간 변형하여야한다. 
  - 마지막 두 줄 없애기 - 너는 자동적으로 악마 원이 모든 프레임에 업데이트 되길 원치 않는다. 왜냐면
  우리는 움직일 겉이다. 몇몇 다른 방법으로, 아래에서 보이는 것 처럼. 
  - if 문안에, 테스트는 true를 반환한다. velX/velY가 업데이트하지 않기를 원한다면, 우리는 
  대신에 x/y 값이 변화하여 악마 원이 스크린에 약간 반사되도록 하고 싶다.악마원의 size속성을 추가하거나 없애는 것이 
  이해될 것이다. 

 - setControls() : 이 메소드는 onkeydown 이벤트 리슨어를 추가한 것이다. window 오브젝트에서, 그래서 현재 키보드에
 키를 누를 때, 우리는 악마 원을 움직일 수 있다. 코드에 따르면 메소드는 정의된다. 
  - 그래서 키를 누를 때, 그 이벤트 오브젝트 키의 속성은 눌린 키를 알아챈다. 그것이 4개에 명시된 키 중하나라면, 그 악마 원은 
  왼/오/위/아래로 움직인다. 
  - 보너스 포인트에 대하여, 너는 우리가 let _this = this를 구성 해야한다. 그것은 함수 범위에 있는 것이다. 
  
 - collisionDetect() : 이것은 

프로그램에 악마 공 가져다 놓기

점수 카운터 개선하기


// 문제점 
 1. 직접 움직이지 않음. 
 2. 
 