클라이언트-사이드 저장소란?
 - MDN 학습 지역뿐만 아니라 우리는 정적 사이트와 동적 사이트에 차이에 대해 이야기한다. 
 대부분 현 주요 사이트들은 동적이다. 그들은 데이터를 서버에 저장한다. 그때 서버사이드 코드
 는 필요한 데이터를 색인, 데이터를 정적 페이지에 삽입, 그리고 유저 브라우저로부터 출력된
 HTML 결과에 추가한다.

 클라이언트사이드 저장소는 비슷한 절차로 일한다. 다만, 차이는 있다. 그것은 JS API를 포함한다. 
 그 API는 고객 측에 데이터를 저장하도록 하는 API이다. 그리고 색인할 때도 마찬가지이다. 
 이것은 매우 별개의 사용이다. 

 - 사이트 환경설정을 개인화이다. 
 - 이전 사이트 활동을 지속한다. 
 - 데이터와 자산을 저장하여 사이트 속도를 높인다. 
 - 유저 오프라인동안 생산된 문서를 저장한다. 

old school : cookies
 - 클라이언트 측 저장소의 개념은 오래 전부터 있었다. 웹의 초기부터 사이트들은 cookies를 웹상
 개인의 경험을 위해 사용해 왔다. 그들은 웹에서 흔히 사용되는 클라이언트 측 저장소의 초기 양식이다. 

 오늘날 클라이언트 측 데이터를 위한 보다 쉬운 매카닉들이 있다. 따라서 우리는 이번 챕터에서 쿠키
 사용벙을 가르쳐주진 않을 것이다. 하지만 쿠키가 오늘날 웹상에서 완전 사용되지 않는다는 것은 아니다. 
 그들은 흔히 사용되는 유저 개별화와 상태 관련된 데이터 자장 방식이다. 세션 ID나 토큰 접근같은. 
 조금 더 쿠키관련 정보가 필요하면 해당 부분에서 확인해 보아라

new school : Web Storage and IndexedDB
 - 우리가 말한 조금 더 쉬운 특징들
    - Web storage API은 저장과 약간의 탐색을 위한 쉽고 단순한 문법을 제공한다. 
    이름이나 값을 일치를 위한 것 같은 데이터 소재. 이것은 니가 몇몇 단순한 데이터를 저장할
    필요가 있을 때 유용하다. 그들의 이름, 접속 여부, 어떤 색으로 배경에 사용했는지 등등. 

    - indexedDB API는 복잡한 데이터를 저장하기 위한 완전한 데이터베이스 시스템을 브라우저에
    제공한다. 이것은 고객의 기록부터 오디오나 비디오같은 파일까지 사용될 수 있다. 

 너는 이 API에 대해서 조금 더 배울 것이다. 

The future : Cache API
 - 몇몇 요즘 브라우저는 새로운 cache API를 제공한다. 이 API는 특정 요청에 대한 
 HTTP반응을 저장하도록 설계되었다. 웹사이트 유산 오프라인을 저장하는 것과 같은 것에 매우 
 유용하다. 그래서 그 사이트는 네트워크 연결 없이 연속적으로 사용할 수 있다. 캐쉬는 보통
 Service Worker API와 연동하여 사용된다. 무조건 그럴 필요는 없지만. 

Storing simple data - web storage
  Web Storage API는 매우 사용하기 쉽다. 너는 단순한 이름과 값 쌍만 저장한다. 그리고
 이것들을 값을 검색할 때 사용된다. 

 Basic syntax
  - 사용방법을 보여줄게

  1. 탬플릿을 들엉간다. 
  2. 브라우저 개발자 툴의 javaScript 콘솔을 연다. 
  3. 너의 웹 저장소의 모두는 두 구조형 오브젝트와 연결된다. sessionStorage와 localStorage
  그 첫번째는 데이터를 브라우저가 켜진동안 게이터를 지속한다.(브라우저 종료시 데이터를 모두 소실한다.)
  그리고 두번째는 브라우저를 닫거나 재실행이후에도 데이터를 유지한다. 우리는 두번째 오브젝트를 사용할 것이다. 
  Storage.setItem() 메소드는 우리가 데이터를 저장하도록 허가한다. 그것은 두 파라미터를 지닌다. 
  아이템의 이름과 값. 너의 JS 콘솔에 이것을 타이핑해라. 
  
  localStorage.setItem('name', 'Chris'); 

  4. 해당 Storage.getItem() 메소드는 한 파라미터를 가진다. 너가 검색하기를 원하는 데이터 소재의
  이름이다. 그리고 그 소재의 값을 돌려준다. 이재 너의 JS 콘솔에 해당 라인을 입력해라

  let myName = localStorage.getItem('name'); 
  myName

  두 번째 라인을 입력함으로써 우리는 해당 변수에 name 소애의 값을 담을 수 있다. 

  5. Storage.removeItem() 메소드는 하나의 파라미터를 지닌다. 너가 제거하기 원하는
  데이터 소재의 이름 그리고 웹 저장소 외에 소재를 제거할 것이다. 

  localStorage.removeItem('name'); 
  let myName = localStorage.getItem('name'); 
  myName

  세 번째 라인은 이제 null을 반환할 것이다. name 소재는 더 이상 웹 저장소에 존재하지 않는다. 

The data persist!
 - 웹 저장소의 핵심 중 하나는 페이지 불러오기 사이에 데이터를 지속하는 것이다. 다음 상황을 보자

 1. 우리의 웹 저장소 탬블릿을 열어라. 
 2. 키워드를 입력 후 닫기
 3. 새로 열기 
 4. 다시 getItem 사용하여 변수할당

 - 너는 값을 여전히 사용할 수 있다. 그 브라우저를 다시 닫고 열었음에도 

Separate storage for each domain
 - 이것은 각각 도메인에서 데이터 저장소를 분리한다. 너는 니가 두 웹사이트를 불어온다면. 
 그것은 다른 웹사이트에서는 볼 수 없다. 

 이것은 너가 보안 문제와 관련해서 상상할 수 있다. 

예시를 포함하기

 - 새롭고 건설적인 지식을 공급하자 단순한 예제를 만들어서 너는 웹 저장소를 사용할 수 있는
 방법을 아이디어를 얻을 것이다. 우리 예제는 너가 이름을 가지도록 허가할 것이다. 그것 후에
 그 페이지는 너가 개인화된 인사문구를 업데이트할 것이다. 이 상태는 지속된다. 페이지/브라우저를
 다시 불러와도. 너의 이름은 웹 저장소에 저장되었기에

 너는 에제 HTML persional-greeting.html을 찾아라. 이 예제는 단순한 웹사이트 해어, 
 컨텐츠, 푸터를 지니고 있다. 그리고 너의 이름을 넣을 양식도

 